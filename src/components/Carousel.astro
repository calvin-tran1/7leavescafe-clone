---
import Slides from './Slides.astro'
---

<div class="carousel w-screen justify-center overflow-hidden align-middle">
  <Slides />
  <div class="absolute bottom-10 z-20 w-screen">
    <button class="dot active" data-carouselbutton="0"></button>
    <button class="dot" data-carouselbutton="1"></button>
    <button class="dot" data-carouselbutton="2"></button>
  </div>
</div>

<script>
  // import type { SerializedSSRManifest } from 'astro/app/types'
  const slider: HTMLElement | null = document.querySelector('.slider-container')
  const slides: HTMLDivElement[] = Array.from(
    document.querySelectorAll('.slide')
  )
  const dotButtons: NodeListOf<HTMLButtonElement> = document.querySelectorAll(
    '.dot'
  ) as NodeListOf<HTMLButtonElement>

  let isDragging = false,
    startPos = 0,
    currentTranslate = 0,
    prevTranslate = 0,
    animationId = 0,
    currentIndex = 0

  let intervalId: number | null = null

  slides.forEach((slide, index) => {
    const slideImage: HTMLElement | null = slide.querySelector('.hero-image')

    if (slideImage) {
      slideImage.addEventListener('dragstart', (e) => e.preventDefault())
    }

    slide.addEventListener('touchstart', touchStart(index))
    slide.addEventListener('touchend', touchEnd)
    slide.addEventListener('touchmove', touchMove)
    slide.addEventListener('mousedown', touchStart(index))
    slide.addEventListener('mouseup', touchEnd)
    slide.addEventListener('mouseleave', touchEnd)
    slide.addEventListener('mousemove', touchMove)
  })

  dotButtons.forEach((button, dotIndex) => {
    button.addEventListener('click', () => {
      currentIndex = dotIndex
      resetTimer()
      updateDots()
      setPositionByIndex()
    })
  })

  function touchStart(index: number) {
    return function (event: MouseEvent | TouchEvent) {
      currentIndex = index
      startPos = getPositionX(event)
      isDragging = true
      animationId = requestAnimationFrame(animation)
      if (slider) {
        slider.classList.add('cursor-grabbing')
      }
    }
  }

  function touchEnd() {
    isDragging = false
    cancelAnimationFrame(animationId)

    const movedBy = currentTranslate - prevTranslate

    if (movedBy < -100 && currentIndex < slides.length - 1) {
      currentIndex += 1
    }
    if (movedBy > 100 && currentIndex > 0) {
      currentIndex -= 1
    }
    if (movedBy < -100 && currentIndex >= slides.length) {
      currentIndex = 0
    }
    if (movedBy > 100 && currentIndex < 0) {
      currentIndex = slides.length - 1
    }

    setPositionByIndex()
    updateDots()
    resetTimer()
    slider?.classList.remove('cursor-grabbing')
  }

  function touchMove(event: MouseEvent | TouchEvent) {
    if (isDragging) {
      const currentIndex = getPositionX(event)
      currentTranslate = prevTranslate + currentIndex - startPos
    }
  }

  function getPositionX(event: MouseEvent | TouchEvent): number {
    return event.type.includes('mouse')
      ? (event as MouseEvent).clientX
      : (event as TouchEvent).touches[0].clientX
  }

  function animation() {
    setSliderPosition()
    if (isDragging) requestAnimationFrame(animation)
  }

  function setSliderPosition(): void {
    if (slider) {
      slider.style.transform = `translateX(${currentTranslate}px)`
    }
  }

  function setPositionByIndex() {
    currentTranslate = currentIndex * -window.innerWidth
    prevTranslate = currentTranslate
    setSliderPosition()
  }

  startTimer()

  function startTimer(): void {
    intervalId = setInterval(() => {
      nextSlide()
      updateDots()
    }, 5000)
  }

  function resetTimer(): void {
    if (intervalId !== null) {
      clearInterval(intervalId)
    }

    startTimer()
  }

  function nextSlide(): void {
    if (currentIndex >= slides.length - 1) {
      currentIndex = 0
    } else {
      currentIndex += 1
    }

    setPositionByIndex()
    updateDots()
  }

  function updateDots(): void {
    dotButtons.forEach((dot, dotIndex) => {
      dot.classList.toggle('active', currentIndex === dotIndex)
    })
  }
</script>
<style>
  .carousel {
    cursor: grab;
  }
  .dot {
    width: 15px;
    height: 15px;
    border-radius: 50%;
    background-color: rgba(211, 211, 211, 0.15);
    margin: 0 5px; /* Adjust the distance between dots */
    cursor: pointer;
  }

  .dot.active {
    background-color: #ffffff;
  }
</style>
