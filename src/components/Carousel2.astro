---
import Slides2 from './Slides2.astro'
const props = Astro.props
---

<div class="carousel2 relative flex w-screen overflow-hidden align-middle">
  <button
    type="button"
    class="prev-btn absolute inset-y-1/2 start-0 z-10 h-max cursor-pointer bg-white"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="36"
      height="36"
      viewBox="0 0 24 24"
      {...props}
    >
      <path
        fill="currentColor"
        fill-opacity="0.1"
        d="m14 18l-6-6l6-6l1.4 1.4l-4.6 4.6l4.6 4.6z"></path>
    </svg>
  </button>
  <Slides2 />
  <button
    type="button"
    class="next-btn absolute inset-y-1/2 end-0 z-10 h-max cursor-pointer bg-white"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="36"
      height="36"
      viewBox="0 0 24 24"
      {...props}
    >
      <path
        fill="currentColor"
        fill-opacity="0.1"
        d="M12.6 12L8 7.4L9.4 6l6 6l-6 6L8 16.6z"></path>
    </svg>
  </button>
</div>

<script>
  const carousel: HTMLElement | null = document.querySelector('.carousel2')
  const slider: HTMLElement | null =
    document.querySelector('.slider-container2')
  const slides: HTMLDivElement[] = Array.from(
    document.querySelectorAll('.slide2')
  )
  const prevBtn: HTMLElement | null = document.querySelector('.prev-btn')
  const nextBtn: HTMLElement | null = document.querySelector('.next-btn')

  let isDragging = false
  let startPos = 0
  let currentTranslate = 0
  let currentIndex = 0

  nextBtn?.addEventListener('click', () => moveCarousel(1))
  prevBtn?.addEventListener('click', () => moveCarousel(-1))

  carousel?.addEventListener('mousedown', mouseDown)
  carousel?.addEventListener('mousemove', mouseMove)
  carousel?.addEventListener('mouseup', mouseUp)

  carousel?.addEventListener('touchstart', touchStart)
  carousel?.addEventListener('touchmove', touchMove)
  carousel?.addEventListener('touchend', touchEnd)

  function mouseDown(event: MouseEvent) {
    isDragging = true
    startPos = event.clientX
  }

  function mouseMove(event: MouseEvent) {
    if (!isDragging) return

    const currentPosition = event.clientX
    const diff = currentPosition - startPos

    const slideWidth = getSlideWidth()
    const distanceMoved = diff / slideWidth

    currentTranslate = currentIndex * -slideWidth + distanceMoved * slideWidth

    setSliderPosition()
  }

  function mouseUp() {
    if (isDragging) {
      isDragging = false

      const slideWidth = getSlideWidth()
      const threshold = slideWidth / 2

      if (Math.abs(currentTranslate % slideWidth) >= threshold) {
        currentIndex += currentTranslate < 0 ? 1 : -1
      }

      currentTranslate = -currentIndex * slideWidth

      setSliderPosition()
    }
  }

  function touchStart(event: TouchEvent) {
    isDragging = true
    startPos = event.touches[0].clientX
  }

  function touchMove(event: TouchEvent) {
    if (!isDragging) return

    const currentPosition = event.touches[0].clientX
    const diff = currentPosition - startPos

    const slideWidth = getSlideWidth()
    const distanceMoved = diff / slideWidth

    currentTranslate = currentIndex * -slideWidth + distanceMoved * slideWidth

    setSliderPosition()
    event.preventDefault()
  }

  function touchEnd() {
    if (!isDragging) return

    isDragging = false

    const slideWidth = getSlideWidth()
    const threshold = slideWidth / 2

    if (Math.abs(currentTranslate % slideWidth) >= threshold) {
      currentIndex += currentTranslate < 0 ? 1 : -1
    }

    currentTranslate = -currentIndex * slideWidth

    setSliderPosition()
  }

  function setSliderPosition(): void {
    if (slider) {
      slider.style.transform = `translateX(${currentTranslate}px)`

      const maxTranslate = -(slides.length - 3) * getSlideWidth()
      const isLastSlideVisible = currentTranslate === maxTranslate

      if (nextBtn) {
        ;(nextBtn as HTMLButtonElement).disabled = isLastSlideVisible
      }
    }
  }

  function moveCarousel(direction: number) {
    const newIndex = currentIndex + direction

    if (newIndex >= 0 && newIndex < slides.length) {
      currentIndex = newIndex
    } else {
      currentIndex = direction > 0 ? slides.length - 1 : 0
    }

    currentTranslate = -currentIndex * getSlideWidth()

    setSliderPosition()
  }

  function getSlideWidth(): number {
    return slides[0].getBoundingClientRect().width
  }
</script>
<style>
  .carousel2 {
    justify-content: flex-start;
  }
</style>
